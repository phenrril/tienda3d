<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.copilot-notes.tienda3d.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.copilot-notes.tienda3d.md" />
              <option name="originalContent" value="# Notas internas – Tienda3D (solo para asistente)&#10;&#10;Instantánea del proyecto para acelerar comprensión y navegación técnica.&#10;&#10;## Stack y arquitectura&#10;- Go 1.22 (módulo: github.com/phenrril/tienda3d)&#10;- Arquitectura hexagonal: domain (entidades/puertos) · usecase (lógica) · adapters (http, repos, payments, storage) · app (wiring)&#10;- SSR con html/template (templates embebidos en internal/views)&#10;- Persistencia: GORM + Postgres&#10;- Pagos: MercadoPago (preferencias de checkout; sandbox/prod según token y APP_ENV)&#10;- Storage local de archivos en `uploads/` (imágenes y modelos)&#10;- OAuth Google opcional; notificaciones Telegram y/o email (SMTP) opcionales&#10;&#10;## Entradas principales&#10;- cmd/tienda3d/main.go: carga .env, init logger, abre DB, NewApp, auto-migraciones/backfill, crea http.Server con handler de app, bind en PORT (fallback 8081–8090 si ocupado), shutdown gracioso.&#10;- internal/app/app.go: construye repos (products, orders, uploaded models, customers), storage local, gateway MP, OAuth config (si vars), parse templates (views.FS). Devuelve http.Handler con httpserver.New().&#10;&#10;## HTTP (internal/adapters/httpserver)&#10;- Middlewares: RequestID, Logging, Recovery, Gzip, RateLimit(60 rpm para /api/*)&#10;- Rutas estáticas: /public/* (public/), /uploads/* (uploads/)&#10;- SSR: &#10;  - / · /products · /product/{slug} · /quote/{id} · /checkout · /pay/{orderID}&#10;- Cart (cookie firmada): /cart (GET/POST), /cart/update, /cart/remove, /cart/checkout&#10;- API JSON:&#10;  - POST /api/products (crear)&#10;  - GET /api/products (listar)&#10;  - GET /api/products/{slug} (detalle por slug)&#10;  - DELETE /api/products/{slug} (borrado completo + archivos)&#10;  - POST /api/products/delete (borrado masivo simple)&#10;  - POST /api/products/upload (multipart: producto + múltiples imágenes)&#10;  - POST /api/quote (cotizar UploadedModel)&#10;  - POST /api/checkout (orden desde quote)&#10;  - POST /webhooks/mp (webhook MercadoPago)&#10;- Auth Google: /auth/google/login · /auth/google/callback · /logout&#10;- Admin: POST /admin/login (JWT HMAC propio, require ADMIN_API_KEY + ADMIN_ALLOWED_EMAILS) · GET /admin/orders (paginado)&#10;&#10;## Dominio (internal/domain)&#10;- Entidades: Product, Variant, Image, Order (+OrderItem), Quote, UploadedModel, Customer, Page&#10;- Puertos: ProductRepo, OrderRepo, QuoteRepo, UploadedModelRepo, PageRepo, CustomerRepo, PaymentGateway, FileStorage, PricingService, QuoteService, Clock&#10;&#10;## Repos Postgres (internal/adapters/repo/postgres)&#10;- ProductRepo: Save · FindBySlug · List · AddImages · DeleteBySlug/Full (colecta rutas de imágenes para borrado físico)&#10;- OrderRepo: Save (Create/update) · FindByID · FindByPreferenceID · UpdateStatus · List&#10;- UploadedModelRepo: Save · FindByID&#10;- CustomerRepo: FindByEmail · Save&#10;- NOTA: No hay implementación de QuoteRepo (gap)&#10;&#10;## Casos de uso (internal/usecase)&#10;- ProductUC: List/GetBySlug/Create/AddImages/DeleteBySlug/DeleteFullBySlug&#10;- OrderUC: CreateFromQuote(quote-&gt;order), UpdateStatus&#10;- PaymentUC: CreatePreference (delegado al gateway)&#10;- QuoteUC: CreateFromModel/Reprice (requiere repos Models + Quotes, PricingService y Clock). Wiring actual no inicializa QuoteUC y no hay QuoteRepo (gap).&#10;&#10;## Pricing (internal/adapters/pricing/simple)&#10;- Fórmula simple: precio por volumen + tiempo + ajuste por layer + factor por infill + margen; retorna breakdown.&#10;&#10;## Pagos (internal/adapters/payments/mercadopago)&#10;- CreatePreference: arma items (incluye envío si corresponde), back_urls a /pay/{orderID}, notification_url /webhooks/mp, external_reference firmado (HMAC con SECRET_KEY). Selección sandbox/prod según token y APP_ENV.&#10;- PaymentInfo: GET /v1/payments/{id}; retorna (status, external_reference)&#10;- VerifyExternalRef: valida external_reference (orderID|sig)&#10;- Webhook handler actual: consulta PaymentInfo, verifica external ref, actualiza Order.Status/MPStatus; trigger notificaciones (Telegram preferente, email fallback si SMTP).&#10;&#10;## Storage (internal/adapters/storage/localfs)&#10;- SaveImage/SaveModel: guarda en uploads/{images|models}/&lt;nsec&gt;-&lt;filename&gt;, retorna ruta local. El server normaliza prefijo &quot;/&quot; para servir vía /uploads/*.&#10;&#10;## Templates (internal/views)&#10;- Embebidos via go:embed (*.html, admin/*.html)&#10;- SSR existentes: layout, home, products, product, cart, checkout, pay. En admin solo existe admin/dashboard.html.&#10;- NOTA: Server renderiza &quot;admin_orders.html&quot; (no existe) -&gt; error de template al visitar /admin/orders (gap).&#10;&#10;## Docker/DevOps&#10;- Makefile: dev/build/test/run, docker-build, docker-run (docker compose up)&#10;- Dockerfile (multi-stage): usa golang:1.25-alpine (ojo: módulo declara go 1.22); COPY &quot;../..&quot; dentro del build stage (sospechoso; fuera del contexto). Runtime alpine, copia binario y assets, expone 8080.&#10;- docker-compose.yml: build: &quot;../..&quot; (sospechoso desde raíz; probable error de contexto). Servicios: db (Postgres), app, caddy. Volúmenes mapean uploads/ y public/. Healthchecks incluidos.&#10;&#10;## Hallazgos / Riesgos a revisar&#10;1) Quote: faltan repositorio (QuoteRepo) e inicialización de QuoteUC en app.NewApp(). Endpoints /quote/* y /api/quote /api/checkout podrían panicar.&#10;2) Admin vista: server espera template &quot;admin_orders.html&quot; pero repo tiene admin/dashboard.html.&#10;3) Docker: paths de build en Dockerfile y docker-compose parecen incorrectos para un compose en la raíz; revisar contexto y COPY.&#10;4) Seguridad: cookies HMAC (cart/sess) no cifradas; SECRET_KEY/SESSION_KEY necesarios en prod. ADMIN_API_KEY + ADMIN_ALLOWED_EMAILS obligatorios para admin.&#10;5) Envíos: costo fijo por provincia en código (provinceCosts=9000); pendiente parametrización.&#10;&#10;## Quick start (local)&#10;- go run ./cmd/tienda3d (requiere DB_DSN o Postgres local; por defecto usa host=localhost user=postgres password=postgres db=tienda3d)&#10;- Variables útiles: PORT, APP_ENV, MP_ACCESS_TOKEN (TEST-...), PUBLIC_BASE_URL, BASE_URL, SESSION_KEY, SECRET_KEY, STORAGE_DIR&#10;&#10;## Mapa de archivos clave&#10;- main.go · app/app.go · adapters/httpserver (server.go, middlewares.go)&#10;- adapters/repo/postgres (product_repo.go, order_repo.go, uploaded_model_repo.go, customer_repo.go)&#10;- adapters/payments/mercadopago/gateway.go&#10;- adapters/pricing/simple/service.go&#10;- domain/*.go · usecase/*.go · views/*.html&#10;&#10;-- Fin --&#10;" />
              <option name="updatedContent" value="# Notas internas – Tienda3D (solo para asistente)&#13;&#10;&#13;&#10;Instantánea del proyecto para acelerar comprensión y navegación técnica. (Actualizado: incluye auth admin JWT y endpoints revisados.)&#13;&#10;&#13;&#10;## Stack y arquitectura&#13;&#10;- Go 1.22 (módulo: github.com/phenrril/tienda3d)&#13;&#10;- Arquitectura hexagonal: domain (entidades/puertos) · usecase (lógica) · adapters (http, repos, payments, storage) · app (wiring)&#13;&#10;- SSR con html/template (templates embebidos en internal/views)&#13;&#10;- Persistencia: GORM + Postgres&#13;&#10;- Pagos: MercadoPago (preferencias de checkout; sandbox/prod según token y APP_ENV)&#13;&#10;- Storage local de archivos en `uploads/` (imágenes y modelos)&#13;&#10;- OAuth Google opcional; notificaciones Telegram y/o email (SMTP) opcionales&#13;&#10;- Autenticación Admin JWT (API key + email permitido) para endpoints de gestión y listado de órdenes&#13;&#10;&#13;&#10;## Entradas principales&#13;&#10;- cmd/tienda3d/main.go: carga .env, init logger, abre DB, NewApp, auto-migraciones/backfill, crea http.Server con handler de app, bind en PORT (fallback 8081–8090 si ocupado), shutdown gracioso.&#13;&#10;- internal/app/app.go: construye repos (products, orders, uploaded models, customers), storage local, gateway MP, OAuth config (si vars), parse templates (views.FS). Devuelve http.Handler con httpserver.New().&#13;&#10;&#13;&#10;## HTTP (internal/adapters/httpserver)&#13;&#10;- Middlewares: RequestID, Logging, Recovery, Gzip, RateLimit(60 rpm para /api/*)&#13;&#10;- Rutas estáticas: /public/* (public/), /uploads/* (uploads/)&#13;&#10;- SSR: `/`, `/products`, `/product/{slug}`, `/quote/{id}`, `/checkout`, `/pay/{orderID}`&#13;&#10;- Cart (cookie firmada): /cart (GET/POST), /cart/update, /cart/remove, /cart/checkout&#13;&#10;- API JSON protegida por JWT admin (Bearer):&#13;&#10;  - POST /api/products (crear)&#13;&#10;  - GET /api/products (listar)&#13;&#10;  - GET /api/products/{slug} (detalle por slug)&#13;&#10;  - DELETE /api/products/{slug} (borrado completo + archivos)&#13;&#10;  - POST /api/products/delete (borrado masivo simple)&#13;&#10;  - POST /api/products/upload (multipart: producto + múltiples imágenes)&#13;&#10;  - GET /admin/orders (listado paginado de órdenes)&#13;&#10;- API pública:&#13;&#10;  - POST /api/quote (cotizar UploadedModel)&#13;&#10;  - POST /api/checkout (orden desde quote)&#13;&#10;  - POST /webhooks/mp (webhook MercadoPago)&#13;&#10;- Auth Google: /auth/google/login · /auth/google/callback · /logout&#13;&#10;- Admin login: POST /admin/login (header X-Admin-Key, opcional email) -&gt; JWT expira ~30m.&#13;&#10;&#13;&#10;## Dominio (internal/domain)&#13;&#10;- Entidades: Product, Variant, Image, Order (+OrderItem), Quote, UploadedModel, Customer, Page&#13;&#10;- Puertos: ProductRepo, OrderRepo, QuoteRepo, UploadedModelRepo, PageRepo, CustomerRepo, PaymentGateway, FileStorage, PricingService, QuoteService, Clock&#13;&#10;&#13;&#10;## Repos Postgres (internal/adapters/repo/postgres)&#13;&#10;- ProductRepo: Save · FindBySlug · List · AddImages · DeleteBySlug/Full (colecta rutas de imágenes para borrado físico)&#13;&#10;- OrderRepo: Save (Create/update) · FindByID · FindByPreferenceID · UpdateStatus · List&#13;&#10;- UploadedModelRepo: Save · FindByID&#13;&#10;- CustomerRepo: FindByEmail · Save&#13;&#10;- NOTA (gap): No hay implementación de QuoteRepo (pero interfaz existe).&#13;&#10;&#13;&#10;## Casos de uso (internal/usecase)&#13;&#10;- ProductUC: List/GetBySlug/Create/AddImages/DeleteBySlug/DeleteFullBySlug&#13;&#10;- OrderUC: CreateFromQuote(quote-&gt;order), UpdateStatus&#13;&#10;- PaymentUC: CreatePreference (delegado al gateway)&#13;&#10;- QuoteUC: CreateFromModel/Reprice (requiere repos Models + Quotes, PricingService y Clock). Wiring actual no inicializa QuoteUC ni QuoteRepo (gap operativo para /api/quote si se invoca).&#13;&#10;&#13;&#10;## Pricing (internal/adapters/pricing/simple)&#13;&#10;- Fórmula simple: precio por volumen + tiempo + ajuste por layer + factor por infill + margen; retorna breakdown.&#13;&#10;&#13;&#10;## Pagos (internal/adapters/payments/mercadopago)&#13;&#10;- CreatePreference: items (incluye envío si corresponde), back_urls `/pay/{orderID}`, notification_url `/webhooks/mp`, external_reference firmado (HMAC con SECRET_KEY). Selección sandbox/prod según token y APP_ENV.&#13;&#10;- PaymentInfo: GET /v1/payments/{id}; retorna (status, external_reference)&#13;&#10;- VerifyExternalRef: valida external_reference (orderID|sig)&#13;&#10;- Webhook: consulta PaymentInfo, valida ref, actualiza Order.Status/MPStatus; dispara notificaciones.&#13;&#10;&#13;&#10;## Storage (internal/adapters/storage/localfs)&#13;&#10;- SaveImage/SaveModel: `uploads/{images|models}/&lt;nsec&gt;-&lt;filename&gt;`; rutas servidas por /uploads/*.&#13;&#10;&#13;&#10;## Templates (internal/views)&#13;&#10;- Embebidos via go:embed (*.html, admin/*.html)&#13;&#10;- Admin carpeta contiene: auth.html, dashboard.html, orders.html, products.html, sales.html&#13;&#10;- GAP: handler usa `admin_orders.html` pero existe `orders.html` (mismatch de nombre) -&gt; error potencial.&#13;&#10;&#13;&#10;## Docker/DevOps&#13;&#10;- Makefile: targets dev/build/test/run, docker-build, docker-run&#13;&#10;- Dockerfile: multi-stage; revisar COPY context (posible inconsistencia con build root)&#13;&#10;- docker-compose.yml: incluye db (Postgres), app, caddy; variables via .env; mappea uploads/ y public/.&#13;&#10;&#13;&#10;## Seguridad&#13;&#10;- JWT admin firmado con `JWT_ADMIN_SECRET` (fallback SECRET_KEY). Expira ~30m.&#13;&#10;- ADMIN_API_KEY + ADMIN_ALLOWED_EMAILS obligatorios para proteger creación/borrado productos.&#13;&#10;- Cookies de carrito firmadas (no cifradas) con SESSION_KEY.&#13;&#10;&#13;&#10;## Hallazgos / Riesgos pendientes&#13;&#10;1. Quote flow incompleto (faltan wiring + repositorio real) -&gt; endpoints de quote pueden fallar.&#13;&#10;2. Mismatch template `admin_orders.html` vs archivo existente `orders.html`.&#13;&#10;3. Docker build context/COPY podrían romper build en producción.&#13;&#10;4. Costos de envío hardcodeados (`provinceCosts`).&#13;&#10;&#13;&#10;## Quick start (local)&#13;&#10;```&#13;&#10;go run ./cmd/tienda3d&#13;&#10;```&#13;&#10;Variables claves: PORT, APP_ENV, MP_ACCESS_TOKEN (TEST-...), PUBLIC_BASE_URL, BASE_URL, SESSION_KEY, SECRET_KEY, ADMIN_API_KEY, ADMIN_ALLOWED_EMAILS.&#13;&#10;&#13;&#10;## Endpoints resumen&#13;&#10;- Admin login: POST /admin/login (X-Admin-Key)&#13;&#10;- Admin/orders: GET /admin/orders (Bearer)&#13;&#10;- Productos (Bearer): POST/GET /api/products, GET /api/products/{slug}, DELETE /api/products/{slug}, POST /api/products/delete, POST /api/products/upload&#13;&#10;- Públicos: POST /api/quote, POST /api/checkout, POST /webhooks/mp, SSR páginas básicas.&#13;&#10;&#13;&#10;-- Fin --" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>