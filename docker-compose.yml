version: "3.9"

networks:
  internal_net:
    internal: true
  edge_net:
    driver: bridge

volumes:
  db_data: {}
  caddy_data: {}
  caddy_config: {}

services:
  db:
    image: postgres:15-alpine
    container_name: tienda3d_db
    env_file: [.env]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks: [internal_net]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    security_opt: ["no-new-privileges:true"]
    cap_drop: [ALL]
    read_only: true
    tmpfs: [/tmp, /var/run/postgresql]

  # ----- PROD -----
  app:
    profiles: ["prod"]
    build:
      context: ../..
      dockerfile: ./Dockerfile
    container_name: tienda3d_app
    env_file: [.env]
    environment:
      APP_ENV: production
      DB_HOST: db
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
    depends_on:
      db: { condition: service_healthy }
    # SIN "ports" en prod
    volumes:
      - ./uploads:/app/uploads
      - ./public:/app/public
    networks: [internal_net, edge_net]
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    user: "1000:1000"
    security_opt: ["no-new-privileges:true"]
    cap_drop: [ALL]
    read_only: true
    tmpfs: [/tmp]

  caddy:
    profiles: ["prod"]
    image: caddy:2.7
    container_name: tienda3d_caddy
    depends_on:
      app: { condition: service_started }
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks: [edge_net]
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:2019/metrics || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    user: "1000:1000"
    security_opt: ["no-new-privileges:true"]
    cap_drop: [ALL]
    read_only: true
    tmpfs: [/tmp]

  # ----- DEV -----
  app_dev:
    profiles: ["dev"]
    build:
      context: ../..
      dockerfile: ./Dockerfile
    container_name: tienda3d_app_dev
    env_file: [.env]
    environment:
      APP_ENV: development
      DB_HOST: db
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
    depends_on:
      db: { condition: service_healthy }
    ports:
      - "8080:8080"     # debug como antes
    volumes:
      - ./uploads:/app/uploads
      - ./public:/app/public
      # opcional hot-reload:
      # - ../..:/app:cached
    networks: [internal_net, edge_net]
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080 || exit 1"]
    restart: unless-stopped
    user: "1000:1000"
    security_opt: ["no-new-privileges:true"]
    cap_drop: [ALL]
    read_only: true
    tmpfs: [/tmp]

  caddy_dev:
    profiles: ["dev"]
    image: caddy:2.7
    container_name: tienda3d_caddy_dev
    depends_on:
      app_dev: { condition: service_started }
    ports:
      - "127.0.0.1:80:80"
      - "127.0.0.1:443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks: [edge_net]
    restart: unless-stopped
    user: "1000:1000"
    security_opt: ["no-new-privileges:true"]
    cap_drop: [ALL]
    read_only: true
    tmpfs: [/tmp]
